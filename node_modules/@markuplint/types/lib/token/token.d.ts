import type { TokenValue } from './types.js';
import type { UnmatchedResult, UnmatchedResultOptions, UnmatchedResultReason } from '../types.js';
export declare class Token {
    /**
     * @see https://github.com/csstree/csstree/blob/master/lib/tokenizer/types.js
     */
    static readonly Comma = 18;
    static readonly Ident = 1;
    static readonly WhiteSpace = 13;
    /**
     * ASCII whitespace is
     * - U+0009 TAB
     * - U+000A LF
     * - U+000C FF
     * - U+000D CR
     * - U+0020 SPACE.
     *
     * @see https://infra.spec.whatwg.org/#ascii-whitespace
     */
    static readonly whitespace: ReadonlyArray<string>;
    /**
     * @deprecated Use {@link getPosition} instead. Will be removed in v5.0.0.
     */
    static getCol(value: string, offset: number): number;
    /**
     * @deprecated Use {@link getPosition} instead. Will be removed in v5.0.0.
     */
    static getLine(value: string, offset: number): number;
    static getPosition(value: string, offset: number): {
        line: number;
        column: number;
    };
    static getType(value: string, separators?: readonly string[]): 1 | 13 | 18;
    static shiftLocation(token: Readonly<Token>, offset: number): {
        offset: number;
        line: number;
        column: number;
    };
    readonly offset: number;
    readonly originalValue: string;
    readonly type: number;
    readonly value: string;
    constructor(value: string, offset: number, originalValue: string, separators?: readonly string[]);
    get length(): number;
    clone(): Token;
    /**
     *
     * @param value The token value or the token type or its list
     */
    includes(value: TokenValue, caseInsensitive?: boolean): boolean;
    /**
     *
     * @param value The token value or the token type or its list
     */
    matches(value: TokenValue, caseInsensitive?: boolean): boolean;
    toJSON(): {
        type: number;
        value: string;
        offset: number;
    };
    toNumber(): number;
    unmatched(options?: UnmatchedResultOptions & {
        readonly ref?: string;
        readonly reason?: UnmatchedResultReason;
    }): UnmatchedResult;
}
