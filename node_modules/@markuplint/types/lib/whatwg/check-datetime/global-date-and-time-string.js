import { log } from '../../debug.js';
import { unmatched } from '../../match-result.js';
import { TokenCollection } from '../../token/index.js';
import { datetimeTokenCheck } from './datetime-tokens.js';
import { parseTimeZone } from './time-zone-offset-string.js';
/**
 * @see https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#global-dates-and-times
 */
export const checkGlobalDateAndTimeString = () => function checkGlobalDateAndTimeString(value) {
    log('CHECK: global-date-and-time-string');
    const tokens = TokenCollection.fromPatterns(value, [
        // YYYY
        /[^-]*/,
        // -
        /\D?/,
        // MM
        /[^-]*/,
        // -
        /\D?/,
        // DD
        /[^\sT]*/,
        // T \s
        /\D?/,
        // hh
        /[^:]*/,
        // :
        /\D?/,
        // mm
        /[^+:Z-]*/,
        // :ss.sss
        /(:[^+Z-]*)?/,
        // time-zone
        /.*/,
    ]);
    log('Global Date and Time "%s" => %O', tokens.value, tokens);
    const res = tokens.eachCheck(datetimeTokenCheck.year, datetimeTokenCheck.hyphen, datetimeTokenCheck.month, datetimeTokenCheck.hyphen, datetimeTokenCheck.date, datetimeTokenCheck.localDateTimeSeparator, datetimeTokenCheck.hour, datetimeTokenCheck.colon, datetimeTokenCheck.minute, second => {
        if (!second || !second.value) {
            return;
        }
        const secondTokens = TokenCollection.fromPatterns(second, [/:?/, /\d*/, /\.?/, /\d*/]);
        log('Second Part: "%s" => %O', secondTokens.value, secondTokens);
        const res = secondTokens.eachCheck(datetimeTokenCheck.colon, datetimeTokenCheck.second, datetimeTokenCheck.decimalPointOrEnd, datetimeTokenCheck.secondFractionalPart);
        if (!res.matched) {
            return res;
        }
    }, zone => {
        if (!zone || !zone.value) {
            return unmatched(value, 'missing-token', {
                expects: [{ type: 'common', value: 'time-zone' }],
                partName: 'time-zone',
            });
        }
        const res = parseTimeZone(zone);
        if (!res.matched) {
            return res;
        }
    }, datetimeTokenCheck.extra);
    if (!res.matched) {
        log('Failed: %O', res);
    }
    return res;
};
